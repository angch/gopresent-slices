Go's Array and Slices Gotchas
7 June 2018
Tags: array, slices

Ang Chin Han
ang.chin.han@gmail.com
@angch

* Introduction

How well do you know slices? What's the difference between main1() and main2()? 

.code slices.go /^func main1/,/^}/

.code slices.go /^func main2/,/^}/

* Explanations

Both a in main1 and main2 are slices.

arrays can be modified. They can't be resized.

Also:
.link https://tour.golang.org/moretypes/8 Slices are like references to arrays

Reading 
.link https://tour.golang.org/moretypes/15 
carefully helps a lot.

* Explanations

Slices references an underlying array. subslicing does not make a new copy of the underlying array. Just a new pointer to a different section of the underlying array. appending... well, read the first link.

This too: https://tour.golang.org/moretypes/11

* Comparisons

(I don't think other languages use slices the way Go uses slices. I got hit hard when I tried to adapt a Python algo to Go directly)

Consider this python program:

   a = [1, 2, 3, 4]
   b = a[1:3]
   
   b[0] = -99
   print(a)
   print(b)

vs

   func main() {
    a := []int{1, 2, 3, 4}
    b := a[1:3]
    b[0] = -99
   
    fmt.Println(a)
    fmt.Println(b)
   }

