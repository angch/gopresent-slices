Go's Array and Slices Gotchas
31 Jul 2018
Tags: array, slices

Ang Chin Han
ang.chin.han@gmail.com
@angch

* Introduction

How well do you know slices? What's the difference between main1() and main2()? 

.code slices.go /^func main1/,/^}/

.code slices.go /^func main2/,/^}/

* Explanations

Both a in main1 and main2 are slices.

arrays can be modified. They can't be resized.

Also:
.link https://tour.golang.org/moretypes/8 Slices are like references to arrays

Reading 
.link https://tour.golang.org/moretypes/15 
carefully helps a lot.

* Explanations

Slices references an underlying array. subslicing does not make a new copy of the underlying array. Just a new pointer to a different section of the underlying array. appending... well, read the first link.

This too: https://tour.golang.org/moretypes/11

* Comparisons

(I don't think other languages use slices the way Go uses slices. I got hit hard when I tried to adapt a Python algo to Go directly)

Consider this python program:

   a = [1, 2, 3, 4]
   b = a[1:3]
   
   b[0] = -99
   print(a)
   print(b)

vs

   func main() {
    a := []int{1, 2, 3, 4}
    b := a[1:3]
    b[0] = -99
   
    fmt.Println(a)
    fmt.Println(b)
   }

* In detail
  one = []int{1, 2, 3}     // one = {len=3, cap=3, data=0x112a5e0 [1 2 3]};            mallocs = +0
  two = []int{4, 5, 6}     // two = {len=3, cap=3, data=0x112a600 [4 5 6]};            mallocs = +0
  
  main1:
  a := make([]int, 0, 100) // a = {len=0, cap=100, data=0xc42004c000 []};              mallocs = +1
  a = append(a, one...)    // a = {len=3, cap=100, data=0xc42004c000 [1 2 3]};         mallocs = +0
  c = append(a, two...)    // c = {len=6, cap=100, data=0xc42004c000 [1 2 3 4 5 6]};   mallocs = +0
  c[0] = -99, a[0] = -10   // a = {len=3, cap=100, data=0xc42004c000 [-10 2 3]};       mallocs = +0
                           // c = {len=6, cap=100, data=0xc42004c000 [-10 2 3 4 5 6]}; mallocs = +0
  main2:
  a := make([]int, 0, 0)   // a = {len=0, cap=0, data=0x1159c88 []};                   mallocs = +0
  a = append(a, one...)    // a = {len=3, cap=4, data=0xc4200121a0 [1 2 3]};           mallocs = +1
  c = append(a, two...)    // c = {len=6, cap=8, data=0xc420018280 [1 2 3 4 5 6]};     mallocs = +1
  c[0] = -99, a[0] = -10   // a = {len=3, cap=4, data=0xc4200121a0 [-10 2 3]};         mallocs = +0
                           // c = {len=6, cap=8, data=0xc420018280 [-99 2 3 4 5 6]};   mallocs = +0

* See Also
https://stackoverflow.com/questions/5131538/slicing-a-list-in-python-without-generating-a-copy